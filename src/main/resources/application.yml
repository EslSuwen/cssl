server:                     #配置server
  tomcat:                   #springboot乱码解决
    uri-encoding: UTF-8
  servlet:
    context-path: /cssl
    encoding:
      force: true
      charset: utf-8
      enabled: true
  port: 8090

spring:
  profiles:
    active:
      - dev2
      - property
  datasource:
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver       # 数据库访问配置,主数据源，默认的
      initial-size: 5                                   # 下面为连接池的补充设置，应用到上面所有数据源中,初始化大小，最小，最大
      min-idle: 5
      max-active: 20
      max-wait: 60000                                   # 配置获取连接等待超时的时间
      time-between-eviction-runs-millis: 60000          # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      min-evictable-idle-time-millis: 300000            # 配置一个连接在池中最小生存的时间，单位是毫秒
      validation-query: SELECT 1
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      pool-prepared-statements: true                    # 打开PSCache，并且指定每个连接上PSCache的大小
      max-pool-prepared-statement-per-connection-size: 20
      filters: stat,log4j2,config                       # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filter:
        stat:
          merge-sql: true
          slow-sql-millis: 5000
        config:
          enabled: true
  redis:                # Redis 配置
    jedis:
      pool:
        max-active: 8   # 连接池最大连接数（使用负值表示没有限制）
        max-wait: -1    # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 8     # 连接池中的最大空闲连接
        min-idle: 0     # 连接池中的最小空闲连接
    timeout: 3000       # 连接超时时间（毫秒）
  devtools:  #热部署
    restart:
      enabled: true
  jpa:
    open-in-view: false
  servlet:
    multipart:
      enabled: true                   # 开启 multipart 上传功能
      file-size-threshold: 2KB        # 文件写入磁盘的阈值
      max-file-size: 4096MB           # 最大文件大小
      max-request-size: 4096MB        # 最大请求大小
  security:
    user:
      name: root
      password: password

mybatis-plus:                                     # mybatis-plus相关配置
  mapper-locations: classpath:mybatis/*Mapper.xml # xml扫描，多个目录用逗号或者分号分隔（告诉 Mapper 所对应的 XML 文件位置）
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

logging: # 日志
  config: classpath:log4j2/log4j2.xml

management: # actuator
  server:
    port: 8090
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info,env
  endpoint:
    health:
      show-details: always

datasource: # 数据库加密
  dev:
    username: root
    password: dFIqLYDm1cmEpNleXHWQFdSdldkgOxdcHG5loAGpNMG355cf91v5hjz34cpKd7eOIfkq4uNfv9OGKvd+gOGVmg==
    publicKey: MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAJo4V1XjNbsPDFe/foiud1IX05dEmU03gb7fjpTcaT8Na3KwZ+szC6IHCq1+hAAl2B6siU3+DGnwcn5N1tPAPMECAwEAAQ==
  prod:
    username: root
    password: LftC/2nC7whrKpSBkyaeCPlhP2m5ilclXJwuSInGoq/ISiwXjRZyOorGDiVj+ohhCDfYL0MoJ3eWSQMydNbnYw==
    publicKey: MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAN1+HtvlA7gaod0ZifVFO7+CEPT5pbwG8OuysaYNwMqOYMM8Abzv7rLzDw3XtfSbyM/dp6qXJd0yLn8ocrppTNcCAwEAAQ==

---
spring:
  profiles: dev  # 开发环境配置
  datasource:
    druid:
      url: jdbc:mysql://localhost:3306/cssldb-dev?serverTimezone=Asia/Shanghai&characterEncoding=utf8&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true
      username: ${datasource.dev.username}
      password: ${datasource.dev.password}
      connection-properties: config.decrypt=true;config.decrypt.key=${datasource.dev.publicKey}
  redis:
    host: 47.115.8.44
    database: 5
    port: 6543


---
spring:
  profiles: dev2  # 开发环境配置2
  datasource:
    druid:
      url: jdbc:mysql://47.115.8.44:3306/csslDB-dev?characterEncoding=utf8
      username: ${datasource.dev.username}
      password: ${datasource.dev.password}
      connection-properties: config.decrypt=true;config.decrypt.key=${datasource.dev.publicKey}
  redis:
    host: 47.115.8.44
    database: 5
    port: 6543

---
spring:
  profiles: prod  # 生产环境配置
  datasource:
    druid:
      url: jdbc:mysql://localhost:3306/csslDB?characterEncoding=utf8
      username: ${datasource.dev.username}
      password: ${datasource.dev.password}
      connection-properties: config.decrypt=true;config.decrypt.key=${datasource.dev.publicKey}
  redis:
    host: localhost
    database: 2
    port: 6688

---
spring:
  profiles: prod2  # 生产环境配置2
  datasource:
    druid:
      url: jdbc:mysql://localhost:3306/csslDB?characterEncoding=utf8
      username: ${datasource.prod.username}
      password: ${datasource.prod.password}
      connection-properties: config.decrypt=true;config.decrypt.key=${datasource.prod.publicKey}
  redis:
    host: 47.115.8.44
    database: 2
    port: 6688
